import unified from 'unified'
import english from 'retext-english'
import remark2retext from 'remark-retext'
import path from 'path'
import toString from 'nlcst-to-string'
import FlexSearch from 'flexsearch'
import { promises as fs } from 'fs'

const options = {
  doc: {
    id: 'id',
    field: 'contents',
    store: ['file', 'title']
  }
}

const template = data => `// Autogenerated. Do not edit.
const data = ${JSON.stringify(data)}
const index = new FlexSearch(${JSON.stringify(options)})
index.import(data)
`

const getURL = (file, source) =>
  path
    .relative(source, file.path)
    .replace(/README\.md$/, 'index.md')
    .replace(/\.md$/, '')
    .concat('.html')

const plugin = (index, { source }, i = 0) => (input, file) =>
  index.add({
    id: i++,
    file: getURL(file, source),
    title: file.data.title,
    contents: toString(input).replace(/\n/g, ' ')
  })

export default class SearchIndex {
  constructor (config) {
    this.index = new FlexSearch(options)
    this.plugins = [
      [
        remark2retext,
        unified()
          .use(english)
          .use(plugin, this.index, config)
      ]
    ]
    this.destination = config.destination
  }

  async export () {
    const filename = path.join(this.destination, 'search.js')
    const data = this.index.export()
    const content = template(data)
    await fs.writeFile(filename, content)
  }
}
